import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.1bfda989.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"keng/vue3.md","filePath":"keng/vue3.md","lastUpdated":1698578871000}'),p={name:"keng/vue3.md"},o=l(`<h2 id="一、找不到名称proces" tabindex="-1">一、找不到名称proces <a class="header-anchor" href="#一、找不到名称proces" aria-label="Permalink to &quot;一、找不到名称proces&quot;">​</a></h2><p><a href="https://juejin.cn/post/7047447121510793223" target="_blank" rel="noreferrer">https://juejin.cn/post/7047447121510793223</a></p><h2 id="二、vue3-报错提示-找不到模块-xxx-vue-或其相应的类型声明" tabindex="-1">二、vue3 报错提示 找不到模块“./XXX.vue”或其相应的类型声明 <a class="header-anchor" href="#二、vue3-报错提示-找不到模块-xxx-vue-或其相应的类型声明" aria-label="Permalink to &quot;二、vue3 报错提示 找不到模块“./XXX.vue”或其相应的类型声明&quot;">​</a></h2><p><a href="https://blog.csdn.net/Stars_in_rain/article/details/123741249" target="_blank" rel="noreferrer">https://blog.csdn.net/Stars_in_rain/article/details/123741249</a></p><h2 id="三、reactive定义的数组或者对象无法更新" tabindex="-1">三、reactive定义的数组或者对象无法更新 <a class="header-anchor" href="#三、reactive定义的数组或者对象无法更新" aria-label="Permalink to &quot;三、reactive定义的数组或者对象无法更新&quot;">​</a></h2><p>不能直接赋值，否则就会失去响应式，数组可以push</p><h2 id="四、无跳转刷新页面" tabindex="-1">四、无跳转刷新页面 <a class="header-anchor" href="#四、无跳转刷新页面" aria-label="Permalink to &quot;四、无跳转刷新页面&quot;">​</a></h2><p>使用provide和inject操作，在app.vue中定义个布尔值</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">router-view</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">isRouterAlive</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> reload(){</span></span>
<span class="line"><span style="color:#E1E4E8;">   this.isRouterAlive = false;</span></span>
<span class="line"><span style="color:#E1E4E8;">   this.$nextTick(function () {</span></span>
<span class="line"><span style="color:#E1E4E8;">     this.isRouterAlive = true;</span></span>
<span class="line"><span style="color:#E1E4E8;">   });</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-view</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">v-if</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">isRouterAlive</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;"> reload(){</span></span>
<span class="line"><span style="color:#24292E;">   this.isRouterAlive = false;</span></span>
<span class="line"><span style="color:#24292E;">   this.$nextTick(function () {</span></span>
<span class="line"><span style="color:#24292E;">     this.isRouterAlive = true;</span></span>
<span class="line"><span style="color:#24292E;">   });</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><h2 id="五、最外层为absolute无法触发动画" tabindex="-1">五、最外层为absolute无法触发动画 <a class="header-anchor" href="#五、最外层为absolute无法触发动画" aria-label="Permalink to &quot;五、最外层为absolute无法触发动画&quot;">​</a></h2><p>transition外层需要再套一层元素</p><h2 id="六、离谱-名为time的组件" tabindex="-1">六、离谱，名为time的组件 <a class="header-anchor" href="#六、离谱-名为time的组件" aria-label="Permalink to &quot;六、离谱，名为time的组件&quot;">​</a></h2><p>今天定义了一个时间组件，命名<code>time</code>，一直显示不出来，找了半天的问题，原来不能使用<code>time</code>命名</p><h2 id="七、axios请求本地文件" tabindex="-1">七、axios请求本地文件 <a class="header-anchor" href="#七、axios请求本地文件" aria-label="Permalink to &quot;七、axios请求本地文件&quot;">​</a></h2><p>axios默认请求的文件夹在public下，放在别的文件夹请求会报404</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">axios.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./a.json&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;res.data = &#39;</span><span style="color:#E1E4E8;">, res.data)</span></span>
<span class="line"><span style="color:#E1E4E8;">}) </span></span>
<span class="line"><span style="color:#6A737D;">// 上述中的 ./a.json 为 ./public/a.json 文件；</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">axios.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./a.json&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;res.data = &#39;</span><span style="color:#24292E;">, res.data)</span></span>
<span class="line"><span style="color:#24292E;">}) </span></span>
<span class="line"><span style="color:#6A737D;">// 上述中的 ./a.json 为 ./public/a.json 文件；</span></span></code></pre></div><h2 id="八、is动态组件" tabindex="-1">八、is动态组件 <a class="header-anchor" href="#八、is动态组件" aria-label="Permalink to &quot;八、is动态组件&quot;">​</a></h2><p>在vue2时期，:is可以通过变量来加载，但是vue3时期，因为组件不需要注册，没有components选项，组件导入可以直接在template直接使用，这时候使用变量加载不出来，需要通过对象来映射。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">import Daily from &#39;./index/daily.vue&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">import Week from &#39;./index/week.vue&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">import Month from &#39;./index/month.vue&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">const typeComponentMap = {</span></span>
<span class="line"><span style="color:#e1e4e8;">	1: Daily,</span></span>
<span class="line"><span style="color:#e1e4e8;">	2: Week,</span></span>
<span class="line"><span style="color:#e1e4e8;">	3: Month,</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">import Daily from &#39;./index/daily.vue&#39;</span></span>
<span class="line"><span style="color:#24292e;">import Week from &#39;./index/week.vue&#39;</span></span>
<span class="line"><span style="color:#24292e;">import Month from &#39;./index/month.vue&#39;</span></span>
<span class="line"><span style="color:#24292e;">const typeComponentMap = {</span></span>
<span class="line"><span style="color:#24292e;">	1: Daily,</span></span>
<span class="line"><span style="color:#24292e;">	2: Week,</span></span>
<span class="line"><span style="color:#24292e;">	3: Month,</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h2 id="九、vue3-动态事件方法名" tabindex="-1">九、vue3 动态事件方法名 <a class="header-anchor" href="#九、vue3-动态事件方法名" aria-label="Permalink to &quot;九、vue3 动态事件方法名&quot;">​</a></h2><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">el-select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-model</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">value</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">change</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">nodeItem.method</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;el-option v-for=&quot;item in nodeItem.options&quot; :label=&quot;item.label&quot; :value=&quot;item.value&quot;&gt;&lt;/el-option&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">el-select</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">el-select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-model</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">value</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> @</span><span style="color:#6F42C1;">change</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">nodeItem.method</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;el-option v-for=&quot;item in nodeItem.options&quot; :label=&quot;item.label&quot; :value=&quot;item.value&quot;&gt;&lt;/el-option&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">el-select</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;select&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;field&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;model&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;title&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;模型实体&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;formValue&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;fetchUrl&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;/datamodel/queryByParam&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;options&quot;</span><span style="color:#E1E4E8;">: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;method&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;modelChange&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;select&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;field&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;model&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;title&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;模型实体&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;formValue&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;fetchUrl&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;/datamodel/queryByParam&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;options&quot;</span><span style="color:#24292E;">: [],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;method&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;modelChange&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 不生效</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">modelChange</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 不生效</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">modelChange</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>change定义的方法nodeItem.method为变量，但是并不生效。</p><ul><li>解决方法</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">el-select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-model</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">value</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">change</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">handleChange</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;el-option v-for=&quot;item in nodeItem.options&quot; :label=&quot;item.label&quot; :value=&quot;item.value&quot;&gt;&lt;/el-option&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">el-select</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  const handleChange = () =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.log(&#39; &#39;, nodeItem.value.method)</span></span>
<span class="line"><span style="color:#E1E4E8;">    if (nodeItem.value.method) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      methodName[nodeItem.value.method]()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  const modelChange = () =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.log(&#39;model&#39;)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  const methodName: {[x: string]: () =&gt; void} = { modelChange }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">el-select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-model</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">value</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> @</span><span style="color:#6F42C1;">change</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">handleChange</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;el-option v-for=&quot;item in nodeItem.options&quot; :label=&quot;item.label&quot; :value=&quot;item.value&quot;&gt;&lt;/el-option&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">el-select</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  const handleChange = () =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    console.log(&#39; &#39;, nodeItem.value.method)</span></span>
<span class="line"><span style="color:#24292E;">    if (nodeItem.value.method) {</span></span>
<span class="line"><span style="color:#24292E;">      methodName[nodeItem.value.method]()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  const modelChange = () =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    console.log(&#39;model&#39;)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  const methodName: {[x: string]: () =&gt; void} = { modelChange }</span></span></code></pre></div><p>定义一个变量保存函数，再通过动态字符串去取对应的函数并执行。</p><blockquote><p>vue2的方法在vue3已经不适用</p></blockquote><h2 id="十、动态路由出现警告-没有匹配到路由" tabindex="-1">十、动态路由出现警告（没有匹配到路由） <a class="header-anchor" href="#十、动态路由出现警告-没有匹配到路由" aria-label="Permalink to &quot;十、动态路由出现警告（没有匹配到路由）&quot;">​</a></h2><blockquote><p>vue-router.esm-bundler.js:72 [Vue Router warn]: No match found for location with path &quot;&quot;</p></blockquote><p>之前是使用这种方式来消除</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;*&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">: NotFound }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;*&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">: NotFound }</span></span></code></pre></div><p>但是新版本会报错</p><blockquote><p>Catch all routes (&quot;*&quot;) must now be defined using a param with a custom regexp</p></blockquote><p>所以使用以下版本</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;/:pathMatch(.*)*&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../views/login.vue&#39;</span><span style="color:#E1E4E8;">) },</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;/:pathMatch(.*)*&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../views/login.vue&#39;</span><span style="color:#24292E;">) },</span></span></code></pre></div><h2 id="十一、组件上使用v-model" tabindex="-1">十一、组件上使用v-model <a class="header-anchor" href="#十一、组件上使用v-model" aria-label="Permalink to &quot;十一、组件上使用v-model&quot;">​</a></h2><p>不管组件上使用v-model传什么值过来，接收一律使用<strong>modelValue</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">props</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  modelValue: Boolean</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">emit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineEmits</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;update:modelValue&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">computed</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> props.modelValue</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;gg&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;update:modelValue&#39;</span><span style="color:#E1E4E8;">, value)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">## 使用的时候</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">myTaskRejectModal</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-model</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;showRejectModal&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#79B8FF;">myTaskRejectModal</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">props</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineProps</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  modelValue: Boolean</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">emit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineEmits</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;update:modelValue&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">computed</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> props.modelValue</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;gg&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;update:modelValue&#39;</span><span style="color:#24292E;">, value)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">## 使用的时候</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">myTaskRejectModal</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-model</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;showRejectModal&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">myTaskRejectModal</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="十二、路由上出现一个" tabindex="-1">十二、路由上出现一个？ <a class="header-anchor" href="#十二、路由上出现一个" aria-label="Permalink to &quot;十二、路由上出现一个？&quot;">​</a></h2><p><a href="http://10.10.113.10:3001/?#/dashboard/guide" target="_blank" rel="noreferrer">http://10.10.113.10:3001/?#/dashboard/guide</a> 这里是 form 表单，点击了button 按钮，触发了他的默认事件，就是触发了提交这个行为。 解决方案： 使用@click.prevent 阻止默认事件</p><h2 id="十三、使用tsx" tabindex="-1">十三、使用tsx <a class="header-anchor" href="#十三、使用tsx" aria-label="Permalink to &quot;十三、使用tsx&quot;">​</a></h2><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> lang=&#39;tsx&#39;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">import { </span><span style="color:#79B8FF;">reactive</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">ref</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">onMounted</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">defineComponent</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">h</span><span style="color:#E1E4E8;"> } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">export default defineComponent({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">setup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    // </span><span style="color:#79B8FF;">return</span><span style="color:#E1E4E8;"> () =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    //   </span><span style="color:#79B8FF;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">h</span><span style="color:#E1E4E8;">(&#39;</span><span style="color:#79B8FF;">div</span><span style="color:#E1E4E8;">&#39;, 11)</span></span>
<span class="line"><span style="color:#E1E4E8;">    // }</span></span>
<span class="line"><span style="color:#E1E4E8;">    return () =</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">div</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">123&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> lang=&#39;tsx&#39;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">import { </span><span style="color:#005CC5;">reactive</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">ref</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">onMounted</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">defineComponent</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">h</span><span style="color:#24292E;"> } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#24292E;">export default defineComponent({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">setup</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    // </span><span style="color:#005CC5;">return</span><span style="color:#24292E;"> () =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    //   </span><span style="color:#005CC5;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">h</span><span style="color:#24292E;">(&#39;</span><span style="color:#005CC5;">div</span><span style="color:#24292E;">&#39;, 11)</span></span>
<span class="line"><span style="color:#24292E;">    // }</span></span>
<span class="line"><span style="color:#24292E;">    return () =</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">div</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">123&lt;/</span><span style="color:#22863A;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>新建一个vue文件，lang设置为<code>tsx</code>。</p>`,44),e=[o];function t(c,r,E,y,i,u){return a(),n("div",null,e)}const v=s(p,[["render",t]]);export{h as __pageData,v as default};
